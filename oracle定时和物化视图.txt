job:oracle的定时任务，定时执行某一个过程或者sql
    DECLARE
      JOB_ID PLS_INTEGER;--这个类型时另外一种整型
    BEGIN
      SYS.DBMS_JOB.SUBMIT(JOB => JOB_ID,
                          WHAT => 'lax_inster;',--存储过程名称用分号隔开，最后一个也要加分号
                          INTERVAL => 'SYSDATE + 10/(60*24)');--执行时间，没10分钟
      COMMIT;
    END;
    查询所有job,在all_jobs视图
    删除：sys.dbms_job.remove('job')--job可在all_jobs中得到
    启动job: dbms_job.run(jobno);
    停止job: dbms.broken(jobno, broken, nextdate); -–broken为boolean值
    初始化相关参数job_queue_processes
        job_queue_process表示oracle能够并发的job的数量，当job_queue_process值为0时表示全部停止oracle的job。
        查看job_queue_processes参数：show parameter job_queue_process;或者select * from v$parameter where name='job_queue_processes';
        修改job_queue_processes参数：alter system set job_queue_processes = 10;
        正在执行的job：select * from dba_jobs_running;
     job在执行失败后会在次重试启动这个job，这个动作会进行16次，启动的时间间隔时1，2，4........最后一次失败后标记为borken不再执行，以后也不再执行
     job如果执行时间在oracle关机的过程中，在oracle下次启动后立即执行。




物化视图materialized view在9i以前的版本叫做快照(SNAPSHOT)，从9i开始改名叫做物化视图。相当于一个巨有实体的表，可以在里面建立索引，索引
    会影响查询物化视图的性能，也会影响更新物化视图的性能
    物化视图分类：包含聚集的物化视图；只包含连接的物化视图；嵌套物化视图。三种物化视图的快速刷新的限制条件有很大区别，而对于其他方面则区别不大
                build immediate是在创建物化视图的时候就生成数据。（默认）
                build deferred则在创建时不生成数据，以后根据需要在生成数据。
    物化视图有二种刷新模式：on demand 还是 on commit。
                on demand仅在被需要的时候进行刷新
                on commit基表又commit时就行刷新，这种方式会使基表的操作速度变慢
                在建立物化视图的时候可以指定ORDER BY语句，使生成的数据按照一定的顺序进行保存。不过这个语句不会写入物化视图的定义中，而且对以后的刷新也无效。
                